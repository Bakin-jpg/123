name: Test Anime Scraper API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        # PERBAIKAN: Mengubah opsi multi-baris menjadi satu baris untuk menghindari kesalahan sintaksis YAML
        options: --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
    
    - name: Start FastAPI server
      run: |
        cd backend
        uvicorn server:app --host 0.0.0.0 --port 8001 &
        sleep 10
      env:
        MONGO_URL: mongodb://localhost:27017
        DB_NAME: test_anime_db
        CORS_ORIGINS: "*"
    
    - name: Wait for server to be ready
      run: |
        echo "Waiting for server..."
        for i in {1..30}; do
          if curl -s http://localhost:8001/api/ > /dev/null; then
            echo "‚úÖ Server is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
    
    - name: Test API Endpoints
      run: |
        echo "========================================="
        echo "üß™ TESTING ANIME SCRAPER API"
        echo "========================================="
        echo ""
        
        # Test 1: Root endpoint
        echo "1Ô∏è‚É£  Testing root endpoint..."
        curl -s http://localhost:8001/api/ | python3 -c "import sys, json; d=json.load(sys.stdin); print('‚úÖ Root OK' if d.get('message') else '‚ùå Root FAILED'); print(json.dumps(d, indent=2))"
        echo ""
        
        # Test 2: Trigger scraping
        echo "2Ô∏è‚É£  Triggering anime scraping..."
        curl -s -X POST http://localhost:8001/api/scrape | python3 -c "import sys, json; d=json.load(sys.stdin); print('‚úÖ Scrape triggered:', d.get('message'))"
        echo ""
        
        # Wait for scraping
        echo "‚è≥ Waiting for scraping to complete (60 seconds)..."
        sleep 60
        
        # Test 3: Check scraper status
        echo ""
        echo "3Ô∏è‚É£  Checking scraper status..."
        curl -s http://localhost:8001/api/scrape/status | python3 -c "import sys, json; d=json.load(sys.stdin); print(f\"‚úÖ Status: {d['message']}\"); print(f\"üìä Anime cached: {d['anime_count']}\"); print(f\"‚è∞ Last run: {d['last_run']}\")"
        echo ""
        
        # Test 4: Get anime list
        echo "4Ô∏è‚É£  Testing anime list..."
        ANIME_COUNT=$(curl -s "http://localhost:8001/api/anime?limit=5" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['total'])")
        if [ "$ANIME_COUNT" -gt 0 ]; then
          echo "‚úÖ Found $ANIME_COUNT anime in cache"
          curl -s "http://localhost:8001/api/anime?limit=3" | python3 -c "import sys, json; d=json.load(sys.stdin); [print(f\"  - {a['title']} ({a['total_episodes']} eps)\") for a in d['data']]"
        else
          echo "‚ùå No anime found"
          exit 1
        fi
        echo ""
        
        # Test 5: Search functionality
        echo "5Ô∏è‚É£  Testing search..."
        curl -s "http://localhost:8001/api/anime/search?q=drama" | python3 -c "import sys, json; d=json.load(sys.stdin); print(f\"‚úÖ Search found {d['total']} results for '{d['query']}'\")"
        echo ""
        
        # Test 6: Get specific anime
        echo "6Ô∏è‚É£  Testing anime detail..."
        ANIME_ID=$(curl -s "http://localhost:8001/api/anime?limit=1" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data'][0]['id'])")
        curl -s "http://localhost:8001/api/anime/$ANIME_ID" | python3 -c "import sys, json; d=json.load(sys.stdin); print(f\"‚úÖ Anime: {d['title']}\"); print(f\"  Genres: {', '.join(d['genres'][:3])}\"); print(f\"  Episodes: {len(d['episodes'])}\"); print(f\"  Year: {d['release_year']}\")"
        echo ""
        
        # Test 7: Episode stream (iframe test)
        echo "7Ô∏è‚É£  Testing episode stream (iframe scraping)..."
        echo "‚è≥ This will take ~10-15 seconds to scrape iframe URL..."
        IFRAME_RESULT=$(curl -s "http://localhost:8001/api/anime/$ANIME_ID/episodes/1/stream")
        IFRAME_URL=$(echo $IFRAME_RESULT | python3 -c "import sys, json; d=json.load(sys.stdin); print(d.get('iframe_url', 'null'))")
        
        echo "$IFRAME_RESULT" | python3 -c "import sys, json; d=json.load(sys.stdin); print(f\"  Episode: {d['episode_number']}\"); print(f\"  Title: {d['title']}\"); print(f\"  Iframe URL: {d.get('iframe_url', 'Not cached yet')}\")"
        
        if [ "$IFRAME_URL" != "null" ] && [ "$IFRAME_URL" != "None" ]; then
          echo "‚úÖ Iframe URL successfully scraped!"
        else
          echo "‚ö†Ô∏è  Iframe URL not available (might be due to timeout or site protection)"
        fi
        echo ""
        
        echo "========================================="
        echo "‚úÖ ALL TESTS COMPLETED!"
        echo "========================================="
    
    - name: Show server logs on failure
      if: failure()
      run: |
        echo "========================================="
        echo "üî• SERVER LOGS"
        echo "========================================="
        # Assuming the log file is created in the backend directory
        cat backend/server.log || echo "No logs found"
